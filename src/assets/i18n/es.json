{
	"Unethical.intro": "En esta sección de mi portafolio publicaré la mayoría de las pruebas que me han pedido durante el proceso de contratación. El objetivo es mostrar cómo se resuelven estas pruebas, con el paso del tiempo estaré subiendo las prueba que logre resolver y iré explicando el código para cualquiera que quiera entender cómo funciona. Siéntase libre de usar el codigo para cualquier prueba de trabajo similar a estas de aquí.",
	"apig.text1": "Un API básico con el método Get hecho en NodeJs, ExpressJS y Moongose (MongoDB)",
	"apig.text10": "Para el despliegue usamos Heroku y con lo siguiente",
	"apig.text10a": "Guía",
	"apig.text10b": "Sólo se agrega en la configuración de Vars MONGOD_URI y en el enlace de débito de Mongo y eso es básicamente todo lo que podemos ver la información de Jason en la lista. Podemos agregar esa url en cualquier conexión y podemos ver la información, como un extra puedes ver que los métodos de CRUD están incluidos y puedes probarlos con Postman",
	"apig.text2": "Así que....se me pidió que hiciera una simple API Conseguir mostrar la información de una base de datos Nosql en este caso MongoDB",
	"apig.text3": "Necesitamos instalar Nodejs (si no lo tienes), ExpressJS, Body Parse, mongoose y dotenv, este último es para permitir un fácil despliegue.",
	"apig.text4": "Primero, hacemos un package.Json entonces creamos un archivo llamado app. Js, el nombre puede cambiar no importa.",
	"apig.text5": "Ahora vamos a crear nuestro archivo de base de datos, llamémoslo db. js.",
	"apig.text6": "Vamos a crear el documento para conectar nuestra base de datos, vamos a llamar a db. js en una carpeta llamada base de datos",
	"apig.text7": "Hagamos nuestro modelo para nuestra base de datos",
	"apig.text8": "Vamos a crear el documento para nuestro modelo de base de datos, vamos a llamar a nameofclass. js en una carpeta llamada modelo.",
	"apig.text9": "Nuestro directorio debería verse así:",
	"bweb.text1": "Aquí mostraré cómo crear un webscrapper básico para recoger información de una determinada url de un canal de YouTube, utilizando: NodeJs, Puppeteer, Express y la typeorm para la base de datos Mysql. ¡Paso a paso, comencemos!",
	"bweb.text2": "*Node debe ser instalado primero*. Tendremos que crear un paquete. Json así que en la consola en nuestra ubicación de la carpeta, escribimos 'npm init', llenamos la información como deseamos y eso es todo.",
	"bweb.text3": "En la misma consola instalamos el Express: npm install express --save . Luego instalamos Body Parser: npm install body-parser . Y para la última instalación tenemos la typeorm para trabajar con la base de datos: npm install typeorm --save.",
	"bweb.text4": "Primero hagamos el raspador, puedes llamar al archivo scrapper. js",
	"bweb.text5": "Vamos a crear el documento para nuestra base de datos que va a recibir la información que agarremos, llamémoslo db.js",
	"bweb.text6": "Ahora vamos a crear nuestro index.js donde vamos a manejar el get and post de nuestra base de datos a scrappers. Añadimos esto: `Aplicación de ejemplo que se escucha en http://localhost:${{{ '{' }}}port{{{{ '}'}` en la última consola.log",
	"bweb.text7": "Ahora creamos nuestro html con los detalles finales de nuestro JS y algo de CSS",
	"bweb.text8": "Y así es como creamos un webscrapper básico con NodeJs",
	"cal.text1": "Calculadora sin función Eval en javascript",
	"cal.text10": "Añadamos alguna prueba para asegurarnos de que funciona como queremos. Una vez más tenemos que añadir esto",
	"cal.text11": "Nuestro CSS",
	"cal.text12": "Nuestro Html",
	"cal.text2": "Ejemplo 2*(2+2) utilice * en la entrada antes de los paréntesis para que funcione correctamente.",
	"cal.text3": "Vamos a explicar cómo funciona esto",
	"cal.text4": "Comencemos por crear un constructor envuelto por una clase para identificar los operadores, vamos a utilizar para las operaciones básicas con las operaciones que va a hacer y añadimos su prefijo, infijo y postfijo, para más información sobre el 'prefijo, infijo y postfijo' haga clic en",
	"cal.text5": "aquí",
	"cal.text6": "Luego crear una función para definir cómo el orden de los operadores van a trabajar con su RegEx para los símbolos que queremos usar.",
	"cal.text7": "Ahora creamos las funciones para los operadores que queremos usar.",
	"cal.text8": "Creamos la función que hace la mayor parte del trabajo procesando el valor que ahora se ha introducido",
	"cal.text8a": "*necesitamos añadir la siguiente frase en la devolución",
	"cal.text9": "Creamos algo llamado",
	"cal.text9a": "singleton",
	"cal.text9b": "para manejar la última parte de los cálculos y crear I/O Handling para gestionar la entrada y salida del bucle de eventos",
	"cal.textTi": "Calculadora sin eval",
	"edu.aca1.text1": "Master en Branded Content y Comunicación Transmedia.",
	"edu.aca1.text2": "Universidad Carlos III. Madrid. 2015",
	"edu.aca2.text1": "Master en Dirección de Publicidad Integrada por TWBA.",
	"edu.aca2.text2": "Universidad Antonio Nebrija. Madrid. 2014",
	"edu.aca3.text1": "Licenciatura en publicidad. ",
	"edu.aca3.text2": "UNAPEC. Rep. Dominicana, Santo Domingo. 2012",
	"edu.acatitle": "Formación Académica",
	"edu.comp1": "Angular: De cero a experto creando aplicaciones (Angular 10+). Udemy.",
	"edu.comp2": "Curso de Desarrollo Web Full Stack.1000 h Factoria F5. Madrid.",
	"edu.comp3": "Desarrollo web para comercio electrónico(E-Commerce/Electronic Commerce). Academia Colon",
	"edu.comp4": "Programación con lenguajes orientados a objetos y bases de datos relacionales. SEPE",
	"edu.comp5": "Node.JS: De cero a experto. Udemy",
	"edu.comptitle": "Formación Complementaria",
	"edu.eduexp": "Formación",
	"hola.title": "¡Hola!",
	"index.api": "Api Get con Node.JS",
	"index.api2": "Así que me pidieron que hiciera una API básica con get on Node. JS, decido hacer la milla extra y subirla a Heroku.",
	"index.cal": "Calculadora sin eval",
	"index.cal2": "Una petición inusual pero importante para saber cómo conseguirlo con JS. Me pidieron que desarrollara una calculadora de términos que pudiera manejar (), *, /, +, y -.",
	"index.con": "Índice del contenido",
	"index.peter": "Peter meditation",
	"index.peter2": "Me pidieron que escribiera un programa diseñado eficientemente que, después de introducir un número entre 1 y 10 ^ 18, representa el último número marcado. Véase más abajo para obtener más información al respecto.",
	"index.quick": "Guía rápida del contenido de la página",
	"index.webscra": "Webscrapper básico con Node.JS",
	"index.webscra2": "Un webscrapper básico hecho en Node.js",
	"info.contact": " Información de contacto",
	"info.detail": "Estos son los medios para contactarme.",
	"info.detail1": "Perfil en GitHub",
	"info.detail2": "Perfil en LinkedIn",
	"intro.contact": "Contacto",
	"intro.ctitle": "Desarrollador web | Publicista",
	"intro.description.text1": " Hola, mi nombre es Ernesto Silva Languasco, estudiante de publicidad y apasionado por el desarrollo web. Después de haber estado en el mundo de la publicidad durante casi 5 años, desarrollé una pasión por el mundo del desarrollo web y como consecuencia de ello decidí cambiar mi pase de compañía. ",
	"intro.description.text2": " Como resultado, he sido un freelance en la zona desde hace 2 años, y desarrollar este sitio web inspirado por un programador de pila completa. Encontrarás todo lo que necesitas saber sobre mí incluido mi portafolio es tanto de programación Front-End como Back-End. Espero que lo disfrute.",
	"intro.home": "Inicio",
	"intro.portfolio": "Portafolio",
	"intro.subctitle": "Un profesional del área de publicidad que se mueve al desarrollo web, siempre haciendo scroll hacia abajo o pasando páginas hacia la izquierda.",
	"job.jobexp": "Experiencia Laboral",
	"lan.lan1": "Inglés: C1",
	"lan.lan2": "Alemán: A2",
	"lan.lan3": "Español: Nativo",
	"lan.ltitle": "Idiomas",
	"peter.text1": "Me pidieron que escribiera un programa diseñado eficientemente que, después de introducir un número entre 1 y 10 ^ 18, que representa el último número comprobado por Peter, sale el último número escrito por Peter. Sin ir a cada número, uno por uno.",
	"peter.text1a": "Estos son los ejemplos dados:",
	"peter.text1b": "Ejemplos: Entrada: 23245 Salida: 22999; Entrada: 11235888 Salida: 11235888; Entrada: 111110 Salida: 99999",
	"peter.text1c": "la expresión completa es la siguiente: let s = `${{ '{' }}n{{ '}' }}`;",
	"peter.text2": "Es un código simple, pero la forma en que se presenta lo hace parecer más complicado.",
	"recent1.jobdes": "Intern de jornada completa, trabajando en la actual plataforma de parkings tanto en front como en back end",
	"recent2.jobdes.text1": "-Coordinación de un equipo de tres personas en los departamentos de marketing y mantenimiento.",
	"recent2.jobdes.text2": "-Contacto con plataformas de gestión de inmuebles, contacto con clientes, ubicación de los inmuebles en medios digitales, estrategias de colaboración de coworking, coordinación del equipo, diseño gráfico, optimización del estado de los inmuebles, gestión de emergencias, contacto con contratistas para mejoras.",
	"recent3.jobdes": "Creación de artes para los diferentes bares y restaurantes que posee la empresa.",
	"recent4.jobdes.text1": "-Creación de contenidos, SEO y SEM en páginas web de la empresa.",
	"recent4.jobdes.text2": "-Diseño de Newsletter y Google Analytics",
	"recentF.jobdes": "Freelance en desarrollo web y creación de contenidos publicitarios, estrategia y experiencia de usuario.",
	"recentO.jobdes": "Desarrollo full-stack de herramientas para clientes internos. Usando las tecnologías de Python y Javascript, entorno de trabajo linux. 100% remoto.",
	"recentW.jobdes": "Mantenimiento de herramientas para clientes internos. Usando las tecnologías de Typescript",
	"tec.tecexp": "Dominio de Tecnologías",
	"work.port": "Aquí puedes ver los proyectos en los que he trabajado. Se publican en su idioma original"
}